import java.awt.event.ActionEvent;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.event.*;
import javax.swing.text.*;

/**
 *
 * @author Group 2: Chris Penepent, Katherine Shaw, Fahad Alotaibi, Nazar Al-Wattar
 */
/* This class creates the Admin Panel window where faculty 
   can be added, edited, or deleted*/
public class AdminEdit extends javax.swing.JFrame {

    /**
     * Creates new form FacultyEdit
     */
    private String firstName;
    private String lastName;
    private String email;
    private BLFaculty faculty;
    private BLFaculty displayProf;
    private ArrayList<String> profList;
    private ArrayList<Integer> profIDs;
    private String firstNameText;
    private String lastNameText;
    private String emailText;
	private MainMenuUI mainMenu;

    //constructor. ActionEvent evt.getSource is a reference to MainMenuUI so the faculty name drop-down can be updated
		//when a new faculty member is added
    public AdminEdit(ActionEvent evt) {
        mainMenu = (MainMenuUI)evt.getSource();
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        adminEditPanel = new javax.swing.JPanel();
        instructionLabel = new javax.swing.JLabel();
        //Create container to hold professor information
        ArrayList<ArrayList<String>> profs = new ArrayList();
        try {
            profs = faculty.profList(); //Get professor info from db
        }
        catch(DLException e){
            JOptionPane.showMessageDialog(null, "Could not complete operation. Details written to log file.");
        }
        profList = new ArrayList(); //Holds drop-down list values
        profIDs = new ArrayList(); //Holds faculty IDs
        profList.add("");  //should be a blank option first
        profList.add("Add New Faculty"); //Add option for new paper to combo box list
        for(int i = 0; i < profs.size(); i++)
        {
            profList.add(profs.get(i).get(1));
            profIDs.add(Integer.parseInt(profs.get(i).get(0)));
        }
        //Instantiate the drop down list
        facultyList = new javax.swing.JComboBox();
        //Creates area of window to display Faculty details
        facultyInfoPanel = new javax.swing.JPanel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        //Displays faculty first name and takes user input
        firstNameTextField = new javax.swing.JTextField();
        //Displays faculty email and takes user input
        emailTextField = new javax.swing.JTextField();
        //Displays faculty last name and takes user input
        lastNameTextField = new javax.swing.JTextField();
        //Creates Edit Button and associated action listener
        editButton = new javax.swing.JButton();
        //Creates Delete Faculty button and associated action listener
        deleteButton = new javax.swing.JButton();
        //Creates Add New Faculty Button and associated action listener
        addNewFacultyButton = new javax.swing.JButton();
        //Creates Save Changes button and associated action listener
        saveChangesButton = new javax.swing.JButton();
        //Creates Return to Search button and associated action listener
        returnToSearchButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        adminEditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Faculty Information"));
        adminEditPanel.setPreferredSize(new java.awt.Dimension(612, 489));

        instructionLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        instructionLabel.setText("Select faculty member:");

        //Set the drop-down list values
        facultyList.setModel(new javax.swing.DefaultComboBoxModel(profList.toArray()));
        //Create action listener for drop down list
        facultyList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyListActionPerformed(evt);
            }
        });

        facultyInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Faculty Information"));

        firstNameLabel.setText("First Name");

        lastNameLabel.setText("Last Name");

        emailLabel.setText("Email");

        firstNameTextField.setEditable(false);

        emailTextField.setEditable(false);

        lastNameTextField.setEditable(false);

        javax.swing.GroupLayout facultyInfoPanelLayout = new javax.swing.GroupLayout(facultyInfoPanel);
        facultyInfoPanel.setLayout(facultyInfoPanelLayout);
        facultyInfoPanelLayout.setHorizontalGroup(
            facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facultyInfoPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameLabel)
                    .addComponent(emailLabel)
                    .addComponent(lastNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120))
        );
        facultyInfoPanelLayout.setVerticalGroup(
            facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, facultyInfoPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(facultyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );

        firstNameTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent evt) {
                firstNameTextFieldDocumentUpdated(evt);
            }
            public void removeUpdate(DocumentEvent evt) {
                firstNameTextFieldDocumentUpdated(evt);
            }
            public void changedUpdate(DocumentEvent evt) {
                firstNameTextFieldDocumentUpdated(evt);
            }
        });
        emailTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent evt) {
                emailTextFieldDocumentUpdated(evt);
            }
            public void removeUpdate(DocumentEvent evt) {
                emailTextFieldDocumentUpdated(evt);
            }
            public void changedUpdate(DocumentEvent evt) {
                emailTextFieldDocumentUpdated(evt);
            }
        });
        lastNameTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent evt) {
                lastNameTextFieldDocumentUpdated(evt);
            }
            public void removeUpdate(DocumentEvent evt) {
                lastNameTextFieldDocumentUpdated(evt);
            }
            public void changedUpdate(DocumentEvent evt) {
                lastNameTextFieldDocumentUpdated(evt);
            }
        });

        editButton.setText("Edit Faculty");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Faculty");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addNewFacultyButton.setText("Add New Faculty");
        addNewFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewFacultyButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        returnToSearchButton.setText("Return to Search");
        returnToSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminEditPanelLayout = new javax.swing.GroupLayout(adminEditPanel);
        adminEditPanel.setLayout(adminEditPanelLayout);
        adminEditPanelLayout.setHorizontalGroup(
            adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(adminEditPanelLayout.createSequentialGroup()
                                .addComponent(editButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton))
                            .addComponent(instructionLabel)
                            .addComponent(facultyList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(facultyInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, adminEditPanelLayout.createSequentialGroup()
                                .addComponent(addNewFacultyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveChangesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(returnToSearchButton)))
                        .addGap(40, 40, 40))))
        );
        adminEditPanelLayout.setVerticalGroup(
            adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEditPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(instructionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(facultyList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addGap(38, 38, 38)
                .addComponent(facultyInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewFacultyButton)
                    .addComponent(saveChangesButton)
                    .addComponent(returnToSearchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        instructionLabel.getAccessibleContext().setAccessibleName("Select Faculty User");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(adminEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* This method generates the actions that occur when the faculty drop
       down list is clicked*/
    private void facultyListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyListActionPerformed
        int profListIdx = facultyList.getSelectedIndex(); //gets the index of the drop-down selection
        if(profListIdx == 0) {
			firstNameTextField.setText("");
            lastNameTextField.setText("");
            emailTextField.setText("");
            firstNameTextField.setEditable(false);
            lastNameTextField.setEditable(false);
            emailTextField.setEditable(false);
			editButton.setEnabled(false);	//cannot edit if no faculty is selected
			deleteButton.setEnabled(false);	//cannot delete either
		}
		if(profListIdx == 1){ /*this is for when "Add New Faculty" is selected
                                the fields are blanked and made editable*/
            firstNameTextField.setText("");
            lastNameTextField.setText("");
            emailTextField.setText("");
            firstNameTextField.setEditable(true);
            lastNameTextField.setEditable(true);
            emailTextField.setEditable(true);
			editButton.setEnabled(false);	//cannot edit if no faculty is selected
			deleteButton.setEnabled(false);	//cannot delete either
        }
        if(profListIdx > 1) /*If a professor name is selected, the first name, last name
            and email fields populate. They are not editable*/
        {
            int profId = profIDs.get(profListIdx-2); //get ID of the selected professor
            displayProf = new BLFaculty(profId); //create a BLFaculty object for the professor
            try{
                displayProf.fetch();            //get the other field values for the BLFaculty object from the database
            }
            catch(DLException e){
                    JOptionPane.showMessageDialog(null, "Could not complete operation. Details written to log file.");
            }
            firstNameTextField.setEditable(false);
            lastNameTextField.setEditable(false);
            emailTextField.setEditable(false);
            firstName = displayProf.getFN();
            lastName = displayProf.getLN();
            email = displayProf.getEmail();

            firstNameTextField.setText(firstName);
            firstNameTextField.setCaretPosition(0);
            lastNameTextField.setText(lastName);
            lastNameTextField.setCaretPosition(0);
            emailTextField.setText(email);
            emailTextField.setCaretPosition(0);//setCaretPosition makes text show from the beginning
			editButton.setEnabled(true);	//now that a faculty is selected, we can edit their details
			deleteButton.setEnabled(true);	//we can also now delete the faculty member

        }
    }//GEN-LAST:event_facultyListActionPerformed

    //This controls what happens when the Delete Faculty button is pressed
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int profListIdx = facultyList.getSelectedIndex(); //gets the index of the drop-down selection
        if(profListIdx > 1){ //a faculty name must be selected
            int profID = profIDs.get(profListIdx-2); //get the ID for the selected faculty
            BLFaculty delFaculty = new BLFaculty(profID); //create BLFaculty object for selected faculty
            //Make user confirm deletion of faculty
            Object[] options = { "OK", "CANCEL" };
            int question = JOptionPane.showOptionDialog(null, "Click OK to delete faculty", "Warning",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
            if(question == JOptionPane.YES_OPTION)
            {
                try{
                    delFaculty.delete();            //Delete the professor from the database
                    profIDs.remove(profListIdx-2);  //Remove the deleted prof ID from the list
                    profList.remove(profListIdx);   //Remove the deleted prof from the drop-down list
                    facultyList.setModel(new javax.swing.DefaultComboBoxModel(profList.toArray())); //reset the drop-down list
                    firstNameTextField.setText("");
                    lastNameTextField.setText("");
                    emailTextField.setText("");
                    JOptionPane.showMessageDialog(null, "Faculty Deleted"); //Display alert to user

                   }
                catch(DLException e){
                    JOptionPane.showMessageDialog(null, "Could not complete operation. Details written to log file.");
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    //This method controls what happens when the Save Changes button is pressed
    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
        int profListIdx = facultyList.getSelectedIndex(); //gets the index of the drop-down selection
        if(profListIdx > 1){ //a faculty name must be selected
			if(!firstNameTextField.getText().isEmpty() && !lastNameTextField.getText().isEmpty() && !emailTextField.getText().isEmpty()){
				int profID = profIDs.get(profListIdx-2); //get the ID for the selected faculty
				try{
					BLFaculty updateFaculty = new BLFaculty(profID); //create BLFaculty object for selected faculty
					updateFaculty.setUpdateDetails(firstNameText, lastNameText, emailText); //call method to set BLFaculty fields
					updateFaculty.put(); //execute the update to the database with new faculty details
					updateFaculty.fetch(); //Update BLFaculty with database values

					String name = firstNameText + " " + lastNameText;

					profList.set(profListIdx, name); //Update the professor name in the drop down list

					facultyList.setModel(new javax.swing.DefaultComboBoxModel(profList.toArray())); //reset the drop-down list

					JOptionPane.showMessageDialog(null, "Faculty saved.");

				}
				catch(DLException d){
					JOptionPane.showMessageDialog(null, "Could not complete operation. Details written to log file.");
				}
			}
			else {
				JOptionPane.showMessageDialog(null, "Please fill out all fields.");
			}
        }
		else {
			JOptionPane.showMessageDialog(null, "Please select a faculty member.");
		}
    }//GEN-LAST:event_saveChangesButtonActionPerformed

	//This handler is attached to the button that closes the Admin Edit window
    private void returnToSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToSearchButtonActionPerformed
		this.mainMenu.updateFacultyNameComboBox(); //update the faculty name combobox in main menu
		this.dispose();
    }//GEN-LAST:event_returnToSearchButtonActionPerformed
    
    //Makes first name, last name, and email fields editable
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        firstNameTextField.setEditable(true);
        lastNameTextField.setEditable(true);
        emailTextField.setEditable(true);
    }//GEN-LAST:event_editButtonActionPerformed

    //This method controls what happens when the Add New Faculty button is pressed
    private void addNewFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewFacultyButtonActionPerformed
        int profListIdx = facultyList.getSelectedIndex(); //gets the index of the drop-down selection
        if(profListIdx == 1){ //Only allow actions if Add New Faculty is selected in the drop-down list
			if(!firstNameTextField.getText().isEmpty() && !lastNameTextField.getText().isEmpty() && !emailTextField.getText().isEmpty()){
				try{
					BLFaculty newFaculty = new BLFaculty(); //create BLFaculty object for selected faculty
					int newID = newFaculty.setInsertDetails(firstNameText, lastNameText, emailText); //Updates BLFaculty object with new details and posts them to the database
					newFaculty.fetch(); //Updates BLFaculty object with database values
					profIDs.add(newID); //Adds new faculty ID to list
					String name = firstNameText + " " + lastNameText;

					profList.add(name); //Adds new faculty name to drop down list

					facultyList.setModel(new javax.swing.DefaultComboBoxModel(profList.toArray())); //Resets drop down list
					firstNameTextField.setText("");
					lastNameTextField.setText("");
					emailTextField.setText("");
					JOptionPane.showMessageDialog(null, "Faculty added.");

				}
				catch(DLException d){
					JOptionPane.showMessageDialog(null, "Could not complete operation. Details written to log file.");
				}
			}
			else {
				JOptionPane.showMessageDialog(null, "Please fill out all fields.");
			}
        }
		else {
			JOptionPane.showMessageDialog(null, "Please select Add New Faculty from the faculty drop-down menu.");
		}
    }//GEN-LAST:event_addNewFacultyButtonActionPerformed

	/*These three DocumentUpdated methods get the user-entered text from the first
	  name, last name, and email text fields*/
	//Updates the Document for the firstNameTextField
	private void firstNameTextFieldDocumentUpdated(DocumentEvent evt) {
		Document firstNameTextFieldDocument = (Document)evt.getDocument();
		int firstNameTextFieldLength = firstNameTextFieldDocument.getLength();
		try {
			firstNameText = firstNameTextFieldDocument.getText(0, firstNameTextFieldLength);
		}
		catch (BadLocationException e) {
		}
	}
        
	//Updates the Document for the lastNameTextField
	private void lastNameTextFieldDocumentUpdated(DocumentEvent evt) {
		Document lastNameTextFieldDocument = (Document)evt.getDocument();
		int lastNameTextFieldLength = lastNameTextFieldDocument.getLength();
		try {
			lastNameText = lastNameTextFieldDocument.getText(0, lastNameTextFieldLength);
		}
		catch (BadLocationException e) {
				}
	}

	//Updates the Document for the emailTextField
	private void emailTextFieldDocumentUpdated(DocumentEvent evt) {
		Document emailTextFieldDocument = (Document)evt.getDocument();
		int emailTextFieldLength = emailTextFieldDocument.getLength();
		try {
			emailText = emailTextFieldDocument.getText(0, emailTextFieldLength);
		}
		catch (BadLocationException e) {
				}
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewFacultyButton;
    private javax.swing.JPanel adminEditPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JPanel facultyInfoPanel;
    private javax.swing.JComboBox facultyList;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JButton returnToSearchButton;
    private javax.swing.JButton saveChangesButton;
    // End of variables declaration//GEN-END:variables
}
